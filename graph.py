# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QVBoxLayout
import pandas as pd
import numpy as np
import matplotlib
import statsmodels.api as sm
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as Navi
from matplotlib.figure import Figure
import seaborn as sns
class MatplotlibCanvas(FigureCanvasQTAgg):
	def __init__(self, parent=None, width=4, height=4, dpi=70):
		fig = Figure(dpi = dpi, figsize=(width,height))
		self.axes = fig.add_subplot(111)
		super(MatplotlibCanvas,self).__init__(fig)
		fig.tight_layout()
        

class ClssDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ClssDialog, self).__init__(parent)
        
        self.verticalLayout = QtWidgets.QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")

       
        self.setWindowTitle("Dialog")
        self.FileName = QtWidgets.QLabel()
        self.FileName.setGeometry(QtCore.QRect(0, 0, 381, 41))
        self.FileName.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0.238806 rgba(48, 29, 127, 125), stop:1 rgba(255, 255, 255, 255));")
        self.FileName.setText("adsad")
        self.verticalLayout.addWidget(self.FileName)

    def btnClosed(self):
        self.close()


class Ui_mainWindow(QtWidgets.QMainWindow):
    def setupUi(self, mainWindow):
        

        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(800, 700)
        self.centralwidget = QtWidgets.QWidget(parent=mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(640, 510, 141, 31))
        self.pushButton1 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton1.setGeometry(QtCore.QRect(640, 550, 141, 31))
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 41, 600, 600))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton.setStyleSheet("QPushButton{\n"
"      transition: 1s;\n"
"  background-color:#00a7cf;\n"
"}\n"
":hover {\n"
"  background-color: #006680;\n"
"}")
        self.pushButton.setDefault(False)
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")

        self.pushButton1.setStyleSheet("QPushButton{\n"
"      transition: 1s;\n"
"  background-color:#00a7cf;\n"
"}\n"
":hover {\n"
"  background-color: #006680;\n"
"}")
        self.pushButton1.setDefault(False)
        self.pushButton1.setFlat(False)
        self.pushButton1.setObjectName("pushButton")

        self.FileName = QtWidgets.QLabel(parent=self.centralwidget)
        self.FileName.setGeometry(QtCore.QRect(0, 0, 381, 41))
        self.FileName.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0.238806 rgba(48, 29, 127, 125), stop:1 rgba(255, 255, 255, 255));")
        self.FileName.setText("")
        

        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(640, 41, 250, 400))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.layoutws = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.layoutws.setContentsMargins(0, 0, 0, 0)


        self.checkboxes = []

        self.FileName.setObjectName("FileName")
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(640, 470, 141, 21))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(parent=self.menubar)
        self.menu.setObjectName("menu")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)
        self.action = QtGui.QAction(parent=mainWindow)
        self.action.setObjectName("action")
        self.action_2 = QtGui.QAction(parent=mainWindow)
        self.action_2.setObjectName("action_2")
        self.menu.addAction(self.action)
        self.menu.addAction(self.action_2)
        self.menubar.addAction(self.menu.menuAction())
        
        self.canvas = MatplotlibCanvas(self)
        self.toolbar =  Navi(self.canvas,self.centralwidget)
               
        self.verticalLayout.addWidget(self.toolbar)
        
        self.df =[]
        self.pushButton.clicked.connect(self.update)
        self.pushButton1.clicked.connect(self.linear_regress)
        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)
        self.action.triggered.connect(self.getFilePath)
    def getFilePath(self):
             
        self.pathoffile = QtWidgets.QFileDialog.getOpenFileName(filter = "*.csv")[0]
        
        for i in range(len(self.pathoffile)-1,-1,-1):
            if self.pathoffile[i] =="/":
                index_sl = i+1
                self.FileName.setText(self.pathoffile[index_sl:])
                break
       # self.FileName.setText(self.pathoffile)
        print(self.pathoffile)
        self.read_data()
    def read_data(self):
        self.df = pd.read_csv(self.pathoffile, encoding='UTF-8').fillna(0)
        self.Update()
        #self.createcheckboxes()
    
    def get_checked_checkboxes(self):
        self.checked = []
        for checkbox in self.checkboxes:
            if checkbox.isChecked():
                self.checked.append(checkbox.text())
        return self.checked
    
    def linear_regress(self):
        
        checkedcheck = self.get_checked_checkboxes()

        if len(checkedcheck) == 2:

            y = self.df[checkedcheck[0]]
            x = self.df[checkedcheck[1]]
            x = sm.add_constant(x)
            model = sm.OLS(y,x).fit()

            self.toolbar.deleteLater()
            self.canvas.deleteLater()
            self.toolbar = None
            self.canvas = None
            self.canvas = MatplotlibCanvas(self)
            self.toolbar = Navi(self.canvas,self.centralwidget)
            self.verticalLayout.addWidget(self.toolbar)
            self.verticalLayout.addWidget(self.canvas)
            tips = sns.load_dataset("tips")
            ax = self.canvas.axes
            # ax.scatter(tips["total_bill"], tips["tip"])
            # ax.set_xlabel("Total Bill")
            # ax.set_ylabel("Tip")
            # ax.set_xlabel('X axis')
            # ax.set_ylabel('Y axis')
            #ax.set_title(self.Title)
            
            #data = np.random.rand(10, 10)
            #sw = self.df[["Business","Agriculture"]]
            fig = plt.figure()
                        
            fig = sm.graphics.plot_regress_exog(model,checkedcheck[1],fig=fig)
            plt.show()
            self.canvas.axes = fig.axes[0]
            self.canvas.draw()
            dialog = ClssDialog(self)
            dialog.resize(400,400)
            print(model.summary())
            dialog.FileName.setText(str(model.summary()))
            dialog.exec()
        else: self.Update()


        return

    def update(self):

        checkedcheck = self.get_checked_checkboxes()
        if checkedcheck:
            self.toolbar.deleteLater()
            self.canvas.deleteLater()
            self.toolbar = None
            self.canvas = None
            self.canvas = MatplotlibCanvas(self)
            self.toolbar = Navi(self.canvas,self.centralwidget)
            self.verticalLayout.addWidget(self.toolbar)
            self.verticalLayout.addWidget(self.canvas)
            tips = sns.load_dataset("tips")
            ax = self.canvas.axes
            # ax.scatter(tips["total_bill"], tips["tip"])
            # ax.set_xlabel("Total Bill")
            # ax.set_ylabel("Tip")
            # ax.set_xlabel('X axis')
            # ax.set_ylabel('Y axis')
            #ax.set_title(self.Title)
            
            #data = np.random.rand(10, 10)
            #sw = self.df[["Business","Agriculture"]]
            sns.heatmap(self.df[checkedcheck].corr(), ax=ax,
                    cbar=True,
                    annot=True)
            self.canvas.draw()
        else: self.Update()
        
    
       
    def Update(self):
        
        while self.layoutws.count():
            item = self.layoutws.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()


        print("Value from Combo Box:","bmh")
        plt.clf()
        plt.style.use("bmh")
        self.createcheckboxes()
        try:
           # self.checkboxes =[]
            self.toolbar.deleteLater()
            self.canvas.deleteLater()
            self.toolbar = None
            self.canvas = None
            #self.verticalLayout.removeItem(self.spacerItem1)
        except Exception as e:
            print(e)
            pass
        self.canvas = MatplotlibCanvas(self)
        self.toolbar = Navi(self.canvas,self.centralwidget)

        self.verticalLayout.addWidget(self.toolbar)
        self.verticalLayout.addWidget(self.canvas)

        self.canvas.axes.cla()
        ax = self.canvas.axes
        #self.df.plot(ax = self.canvas.axes)
        ax.plot(self.df)
        
        legend = ax.legend()
        legend.set_draggable(True)
	
        ax.set_xlabel('X axis')
        ax.set_ylabel('Y axis')
        #ax.set_title(self.Title)
        ax.legend()
        self.canvas.draw()
        
    
    def createcheckboxes(self):
        self.checkboxes = []
        a = 20
        for i in self.df.columns:
            checkbox = QtWidgets.QCheckBox(parent=self.centralwidget)

            checkbox.setText(i)
            a = a+21
            self.layoutws.addWidget(checkbox)
            self.checkboxes.append(checkbox)


    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "Анализ данных"))
        self.pushButton.setText(_translate("mainWindow", "Построить график cor"))
        self.pushButton1.setText(_translate("mainWindow", "Построить график\n регрессии"))
        self.comboBox.setItemText(0, _translate("mainWindow", "Линейная"))
        self.comboBox.setItemText(1, _translate("mainWindow", "Полиномиальная"))
        self.comboBox.setItemText(2, _translate("mainWindow", "Гребневая регрессия"))
        self.menu.setTitle(_translate("mainWindow", "Файл"))
        self.action.setText(_translate("mainWindow", "Открыть"))
        self.action_2.setText(_translate("mainWindow", "Выход"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec())
